{
    "Common.Yes": "Yes",
    "Common.No": "No",
    "Common.Help": "Help",
    "Common.remindMeLater": "Remind me later",
    "Common.reload": "Reload",
    "LanguageServer.settingsMigratedMessage": "Settings applicable to Microsoft Language Server were copied to Pylance settings. Please check settings.json file(s) for details.",
    "LanguageServer.settingsMigrationError": "The following settings could not be migrated:",
    "LanguageServer.settingsNotOverridable": "'{0}' cannot be set when a pyrightconfig.json or pyproject.toml is being used.",
    "Insiders.installingPreRelease": "Installing Pylance pre-release build...",
    "ClientLoc.typeCheckingModeStatusItem.name": "Python Type Checking Mode",
    "ClientLoc.typeCheckingModeStatusItem.textFormatted": "Type Checking: {0}",
    "ClientLoc.typeCheckingModeStatusItem.textFormattedFromConfig": "Type Checking: {0} (from {1})",
    "ClientLoc.typeCheckingModeStatusItem.titleOff": "Switch to off",
    "ClientLoc.typeCheckingModeStatusItem.titleBasic": "Switch to basic",
    "ClientLoc.typeCheckingModeStatusItem.titleConfig": "Open config",
    "ClientLoc.autoImportCompletionsStatusItem.name": "Python Auto Import Completions Mode",
    "ClientLoc.autoImportCompletionsStatusItem.text": "Auto Import Completions: {0}",
    "ClientLoc.autoImportCompletionsStatusItem.titleOff": "Switch to off",
    "ClientLoc.autoImportCompletionsStatusItem.titleOn": "Switch to on",
    "ClientLoc.updateSettingsErrorMsgFormatted": "Failed to update setting '{0}.{1}'.",
    "ClientLoc.ServerRestart.crashMessage": "Pylance has crashed.",
    "ClientLoc.ServerRestart.restartingMessage": "Restarting Pylance using Node.js ...",
    "ClientLoc.ServerRestart.crashRestartingMessage": "Pylance has crashed. Pylance will restart when you select a Node.js executable to run Pylance.",
    "ClientLoc.ServerRestart.selectButton": "Select",
    "ClientLoc.ServerRestart.selectNodeJsTitle": "Select Node.js executable to run Pylance",
    "ClientLoc.askNodeSafetyQuestion": "Pylance is configured to run with {0}. Do you want to use this executable to run Pylance?",
    "ClientLoc.crashTooManyRestarts": "Pylance has crashed 5 times in the last 3 minutes. Pylance will not be restarted. Please check [this link](https://aka.ms/AApf7ox) for more details.",
    "ClientLoc.pylanceAndPythonStableExtensionMismatch": "Pylance and Python extension have incompatible shared dependencies.\nPlease make sure both extensions are the latest stable version.",
    "ClientLoc.pylanceAndPythonPrereleaseExtensionMismatch": "Pylance and Python extension have incompatible shared dependencies.\nPlease make sure both extensions are the latest prerelease version.",
    "Refactoring.MoveSymbol.progressBarTitle": "Move Symbol To...",
    "Refactoring.MoveSymbol.newFileLabel": "Enter destination file path",
    "Refactoring.MoveSymbol.newFileDetail": "Enter path or select destination file",
    "Refactoring.MoveSymbol.separatorText": "Destination Files",
    "Refactoring.MoveSymbol.quickPickPlaceHolder": "Search destination file",
    "Refactoring.MoveSymbol.quickPickTitle": "Select destination for move",
    "Refactoring.MoveSymbol.openDialogOpenLabel": "Select",
    "Refactoring.MoveSymbol.openDialogTitle": "Select new file to move the symbol to...",
    "Refactoring.SearchImports.quickPickPlaceHolder": "Search imports",
    "Refactoring.SearchImports.quickPickTitle": "Search additional matching imports",
    "settings.python.analysis.inlayHints.variableTypes.description": "Enable/disable inlay hints for variable types. Hints are not displayed for assignments of literals or constants:\n```python\nfoo':list[str]' = [\"a\"]\n \n```\n",
    "settings.python.analysis.inlayHints.functionReturnTypes.description": "Enable/disable inlay hints for function return types:\n```python\ndef foo(x:int) '-> int':\n\treturn x\n```\n",
    "settings.python.analysis.inlayHints.pytestParameters.description": "Enable/disable inlay hints for pytest function parameter types:\n```python\ndef test_foo(my_fixture: 'str'):\n\tassert(my_fixture == 'foo')\n```\n",
    "settings.python.analysis.inlayHints.callArgumentNames.description": "Enable/disable inlay hints for call argument names:\n```python\ndatetime('year='2019, 'month='10, 'day='27)\n```\n",
    "settings.python.analysis.completeFunctionParens.description": "Add parentheses to function completions.",
    "settings.python.analysis.autoImportCompletions.description": "Enable auto-import completions.",
    "settings.python.analysis.autoFormatStrings.description": "When typing a '{' in a string, automatically prefix the string with an 'f'.",
    "settings.python.analysis.autoSearchPaths.description": "Automatically add common search paths like 'src'.",
    "settings.python.analysis.autoIndent.description": "Automatically adjust indentation based on language semantics when typing Python code.",
    "settings.python.analysis.stubPath.description": "Path to directory containing custom type stub files.",
    "settings.python.analysis.diagnosticMode.description": "Analysis scope for showing diagnostics.",
    "settings.python.analysis.extraPaths.description": "Additional import search resolution paths",
    "settings.python.analysis.include.description": "Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If the path contains a '${workspaceFolder:<workspaceName>}' variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
    "settings.python.analysis.exclude.description": "Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories. If the path contains a '${workspaceFolder:<workspaceName>}' variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
    "settings.python.analysis.ignore.description": "Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If the path contains a '${workspaceFolder:<workspaceName>}' variable, the glob pattern will only apply to the corresponding workspace in a multi-root workspace environment.",
    "settings.python.analysis.indexing.description": "Enable indexing of installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.",
    "settings.python.analysis.userFileIndexingLimit.description": "Maximum number of user files to index in the workspace. Indexing files is a performance-intensive task. Please use this setting to limit the number of files you want us to index. If you enter -1, we will index all files.",
    "settings.python.analysis.persistAllIndices.description": "Indices for all third party libraries will be persisted to disk.",
    "settings.python.analysis.extraCommitChars.description": "Allow using '.', '(' as commit characters when applicable.",
    "settings.python.analysis.useLibraryCodeForTypes.description": "Use library implementations to extract type information when type stub is not present.",
    "settings.typecheckingMode.off.description": "Show diagnostics for invalid syntax, unresolved imports, undefined variables.",
    "settings.typecheckingMode.basic.description": {
        "message": "All \"off\" rules + basic type checking rules.",
        "comment": "{Locked='off'}"
    },
    "settings.typecheckingMode.standard.description": {
        "message": "All \"off\" rules + basic type checking rules + standard typechecker rules.",
        "comment": "{Locked='off'}"
    },
    "settings.typecheckingMode.strict.description": {
        "message": "All \"off\" rules + all type checking rules.",
        "comment": "{Locked='off'}"
    },
    "settings.python.analysis.fixAll.description": "source fixes to run in fix all.",
    "settings.python.analysis.packageIndexDepths.description": "Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:\n```JSON\n{\"name\": \"package name (str)\",\n \"depth\": \"depth to scan (int)\",\n \"includeAllSymbols\": \"whether to include all symbols (bool)\"}\n\n```\nIf `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.  \n  \nUsage example: \n```JSON\n[\n\t{\"name\": \"sklearn\", \"depth\": 2, \"includeAllSymbols\": true},\n\t{\"name\": \"matplotlib\", \"depth\": 3, \"includeAllSymbols\": false}\n]\n\n```\n",
    "settings.python.analysis.diagnosticSeverityOverrides.description": "Allows a user to override the severity levels for individual diagnostics. Use the rule name as a key and one of \"error\", \"warning\", \"information\", \"none\", `true` (alias for \"error\") or `false` (alias for \"none\") as value. The default value shown for each diagnostic is the default when \"python.analysis.typeCheckingMode\" is set to \"off\". See [here](https://github.com/microsoft/pyright/blob/main/docs/configuration.md#diagnostic-rule-defaults) for defaults for each type checking mode (\"off\", \"basic\" and \"strict\").",
    "settings.python.analysis.typeEvaluation.strictListInference.description": "When inferring the type of a list, use strict type assumptions. For example, the expression `[1, 'a', 3.4]` could be inferred to be of type `list[Any]` or `list[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeEvaluation.strictDictionaryInference.description": "When inferring the type of a dictionary’s keys and values, use strict type assumptions. For example, the expression `{'a': 1, 'b': 'a'}` could be inferred to be of type `dict[str, Any]` or `dict[str, int | str]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeEvaluation.strictSetInference.description": "When inferring the type of a set, use strict type assumptions. For example, the expression `{1, 'a', 3.4}` could be inferred to be of type `set[Any]` or `set[int | str | float]`. If this setting is true, it will use the latter (stricter) type. The default value for this setting is `false`.",
    "settings.python.analysis.typeEvaluation.analyzeUnannotatedFunctions.description": "Analyze and report errors for functions and methods that have no type annotations for input parameters or return types. The default value for this setting is `true`.",
    "settings.python.analysis.typeEvaluation.strictParameterNoneValue.description": "PEP 484 indicates that when a function parameter is assigned a default value of None, its type should implicitly be Optional even if the explicit type is not. When enabled, this rule requires that parameter type annotations use Optional explicitly in this case. The default value for this setting is `true`.",
    "settings.python.analysis.typeEvaluation.enableTypeIgnoreComments.description": "PEP 484 defines support for `# type: ignore` comments. This switch enables or disables support for these comments. The default value for this setting is `true`. This does not affect `# pyright: ignore` comments.",
    "settings.python.analysis.typeEvaluation.deprecateTypingAliases.description": "PEP 585 indicates that aliases to types in standard collections that were introduced solely to support generics are deprecated as of Python 3.9. This switch controls whether these are treated as deprecated. This applies only when pythonVersion is 3.9 or newer. The default value for this setting is `false` but may be switched to `true` in the future.",
    "settings.python.analysis.typeEvaluation.enableReachabilityAnalysis.description": "If enabled, code that is determined to be unreachable by type analysis is reported using a tagged hint. This setting does not affect code that is determined to be unreachable regardless of type analysis; such code is always reported as unreachable. This setting also has no effect when when using the command-line version of pyright because it never emits tagged hints for unreachable code.",
    "settings.python.analysis.typeEvaluation.enableExperimentalFeatures.description": "Enables a set of experimental (mostly undocumented) features that correspond to proposed or exploratory changes to the Python typing standard. These features will likely change or be removed, so they should not be used except for experimentation purposes. The default value for this setting is `false`.",
    "settings.python.analysis.typeEvaluation.disableBytesTypePromotions.description": "Disables legacy behavior where `bytearray` and `memoryview` are considered subtypes of `bytes`. [PEP 688](https://peps.python.org/pep-0688/#no-special-meaning-for-bytes) deprecates this behavior, but this switch is provided to restore the older behavior. The default value for this setting is `false`.",
    "settings.python.analysis.logLevel.description": "Specifies the level of logging for the Output panel",
    "settings.python.analysis.typeshedPaths.description": "Paths to look for typeshed modules.",
    "settings.python.analysis.importFormat.description": "Defines the default format for import module.",
    "settings.python.analysis.enableSyncServer.description": "Use sync server mode [Experimental]. For internal use only, may cause Pylance to stop working.",
    "settings.python.analysis.reportExtraTelemetry.description": "Report extra telemetry [Experimental]. For internal use only, may cause Pylance to slow down.",
    "settings.python.analysis.enablePytestSupport.description": "Enables pytest support in Pylance.",
    "settings.python.analysis.gotoDefinitionInStringLiteral.description": "For string literals that look like module names, enables go to definition to go to the module.",
    "settings.python.analysis.nodeExecutable.description": "Path to a Node.js executable to use for running the language server. If not specified, the language server will use the Node.js executable that ships with VS Code. Set this option if you're having trouble with Pylance running out of memory. See [here](https://aka.ms/AApf7ox) for more information.",
    "settings.python.analysis.supportRestructuredText.description": "Enable/disable support for reStructuredText in docstrings. Experimental, may cause docstrings to no longer render.",
    "settings.python.analysis.cacheLSPData.description": "Cache LSP data for faster completions. Experimental, may cause Pylance to stop working.",
    "settings.python.analysis.regenerateStdLibIndices.description": "Instead of relying on the shared stdlib.json indices for all Python versions, generate unique indices tailored to each workspace's specific Python version and platform. This regeneration process will affect performance, unlike using the prebuilt stdlib indices.",
    "settings.python.analysis.disableTaggedHints.description": "Disable hint diagnostics with special hints for grayed-out or strike-through text.",
    "commands.pylance.reportIssue.title": {
        "message": "Pylance: Report Issue...",
        "comment": "{Locked='Pylance: ','...'}"
    },
    "commands.pylance.indexing.clearPersistedIndices.title": {
        "message": "Pylance: Clear All Persisted Indices",
        "comment": "{Locked='Pylance: '}"
    },
    "commands.pylance.profiling.start.title": {
        "message": "Pylance: Start Profiling",
        "comment": "{Locked='Pylance: '}"
    },
    "commands.pylance.profiling.stop.title": {
        "message": "Pylance: Stop Profiling",
        "comment": "{Locked='Pylance: '}"
    },
    "commands.pylance.logging.start.title": {
        "message": "Pylance: Start Logging",
        "comment": "{Locked='Pylance: '}"
    },
    "commands.pylance.logging.stop.title": {
        "message": "Pylance: Stop Logging",
        "comment": "{Locked='Pylance: '}"
    },
    "commands.pylance.gotoOutputChannel.title": {
        "message": "Pylance: Go to output channel",
        "comment": "{Locked='Pylance: '}"
    }
}
